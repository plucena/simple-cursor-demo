"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wallet = void 0;
const ethers_1 = require("ethers");
const types_1 = require("../types");
const coti_sdk_typescript_1 = require("@coti-io/coti-sdk-typescript");
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
class Wallet extends ethers_1.Wallet {
    constructor(privateKey, provider, userOnboardInfo) {
        super(privateKey, provider);
        this._autoOnboard = true;
        this._userOnboardInfo = userOnboardInfo;
    }
    getAutoOnboard() {
        return this._autoOnboard;
    }
    getUserOnboardInfo() {
        return this._userOnboardInfo;
    }
    setUserOnboardInfo(onboardInfo) {
        if (onboardInfo) {
            this._userOnboardInfo = {
                ...this._userOnboardInfo,
                ...onboardInfo,
            };
        }
    }
    setAesKey(key) {
        if (this._userOnboardInfo) {
            this._userOnboardInfo.aesKey = key;
        }
        else
            this._userOnboardInfo = { aesKey: key };
    }
    setOnboardTxHash(hash) {
        if (this._userOnboardInfo) {
            this._userOnboardInfo.txHash = hash;
        }
        else
            this._userOnboardInfo = { txHash: hash };
    }
    setRsaKeyPair(rsa) {
        if (this._userOnboardInfo) {
            this._userOnboardInfo.rsaKey = rsa;
        }
        else
            this._userOnboardInfo = { rsaKey: rsa };
    }
    async encryptValue(plaintextValue, contractAddress, functionSelector) {
        if (this._userOnboardInfo?.aesKey === null || this._userOnboardInfo?.aesKey === undefined) {
            if (this._autoOnboard) {
                console.warn("user AES key is not defined and need to onboard or recovered.");
                await this.generateOrRecoverAes();
                if (!this._userOnboardInfo || this._userOnboardInfo.aesKey === undefined || this._userOnboardInfo.aesKey === null) {
                    throw new Error("user AES key is not defined and cannot be onboarded or recovered.");
                }
            }
            else {
                throw new Error("user AES key is not defined and auto onboard is off.");
            }
        }
        const value = typeof plaintextValue === 'number' ? BigInt(plaintextValue) : plaintextValue;
        let result;
        if (typeof value === 'bigint') {
            result = (0, coti_sdk_typescript_1.buildInputText)(value, {
                wallet: this,
                userKey: this._userOnboardInfo.aesKey
            }, contractAddress, functionSelector);
        }
        else if (typeof value === 'string') {
            result = (0, coti_sdk_typescript_1.buildStringInputText)(value, {
                wallet: this,
                userKey: this._userOnboardInfo.aesKey
            }, contractAddress, functionSelector);
        }
        else {
            throw new Error("Unknown type");
        }
        return result;
    }
    async decryptValue(ciphertext) {
        if (this._userOnboardInfo?.aesKey === null || this._userOnboardInfo?.aesKey === undefined) {
            if (this._autoOnboard) {
                console.warn("user AES key is not defined and need to onboard or recovered.");
                await this.generateOrRecoverAes();
                if (!this._userOnboardInfo || this._userOnboardInfo.aesKey === undefined || this._userOnboardInfo.aesKey === null) {
                    throw new Error("user AES key is not defined and cannot be onboarded or recovered.");
                }
            }
            else
                throw new Error("user AES key is not defined and auto onboard is off .");
        }
        if (typeof ciphertext === 'bigint') {
            return (0, coti_sdk_typescript_1.decryptUint)(ciphertext, this._userOnboardInfo.aesKey);
        }
        return (0, coti_sdk_typescript_1.decryptString)(ciphertext, this._userOnboardInfo.aesKey);
    }
    enableAutoOnboard() {
        this._autoOnboard = true;
    }
    disableAutoOnboard() {
        this._autoOnboard = false;
    }
    clearUserOnboardInfo() {
        this._userOnboardInfo = undefined;
    }
    async generateOrRecoverAes(onboardContractAddress = constants_1.ONBOARD_CONTRACT_ADDRESS) {
        if (this._userOnboardInfo?.aesKey)
            return;
        else if (this._userOnboardInfo && this._userOnboardInfo.rsaKey && this._userOnboardInfo.txHash)
            this.setAesKey(await (0, utils_1.recoverAesFromTx)(this._userOnboardInfo.txHash, this._userOnboardInfo.rsaKey, onboardContractAddress, this.provider));
        else {
            const accountBalance = await (0, utils_1.getAccountBalance)(this.address, this.provider || (0, utils_1.getDefaultProvider)(types_1.CotiNetwork.Testnet));
            if (accountBalance > BigInt(0))
                this.setUserOnboardInfo(await (0, utils_1.onboard)(onboardContractAddress, this));
            else
                throw new Error("Account balance is 0 so user cannot be onboarded.");
        }
    }
}
exports.Wallet = Wallet;
