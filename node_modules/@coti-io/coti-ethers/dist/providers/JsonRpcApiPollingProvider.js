"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _JsonRpcApiPollingProvider_pollingInterval;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpcApiPollingProvider = void 0;
const JsonRpcApiProvider_1 = require("./JsonRpcApiProvider");
const defaultOptions = {
    polling: false,
    staticNetwork: null,
    batchStallTime: 10, // 10ms
    batchMaxSize: (1 << 20), // 1Mb
    batchMaxCount: 100, // 100 requests
    cacheTimeout: 250,
    pollingInterval: 4000
};
function isPollable(value) {
    return (value && typeof (value.pollingInterval) === "number");
}
class JsonRpcApiPollingProvider extends JsonRpcApiProvider_1.JsonRpcApiProvider {
    constructor(network, options) {
        super(network, options);
        _JsonRpcApiPollingProvider_pollingInterval.set(this, void 0);
        let pollingInterval = this._getOption("pollingInterval");
        if (pollingInterval == null) {
            pollingInterval = defaultOptions.pollingInterval;
        }
        __classPrivateFieldSet(this, _JsonRpcApiPollingProvider_pollingInterval, pollingInterval, "f");
    }
    _getSubscriber(sub) {
        const subscriber = super._getSubscriber(sub);
        if (isPollable(subscriber)) {
            subscriber.pollingInterval = __classPrivateFieldGet(this, _JsonRpcApiPollingProvider_pollingInterval, "f");
        }
        return subscriber;
    }
    /**
     *  The polling interval (default: 4000 ms)
     */
    get pollingInterval() { return __classPrivateFieldGet(this, _JsonRpcApiPollingProvider_pollingInterval, "f"); }
    set pollingInterval(value) {
        if (!Number.isInteger(value) || value < 0) {
            throw new Error("invalid interval");
        }
        __classPrivateFieldSet(this, _JsonRpcApiPollingProvider_pollingInterval, value, "f");
        this._forEachSubscriber((sub) => {
            if (isPollable(sub)) {
                sub.pollingInterval = __classPrivateFieldGet(this, _JsonRpcApiPollingProvider_pollingInterval, "f");
            }
        });
    }
}
exports.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;
_JsonRpcApiPollingProvider_pollingInterval = new WeakMap();
