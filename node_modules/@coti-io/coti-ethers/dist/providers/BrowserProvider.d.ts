import { Eip1193Provider, JsonRpcError, JsonRpcPayload, JsonRpcResult } from "ethers";
import type { Networkish } from "ethers/lib.commonjs/providers/network";
import { BrowserProviderOptions } from "ethers/lib.commonjs/providers/provider-browser";
import { JsonRpcApiPollingProvider } from "./JsonRpcApiPollingProvider";
import { JsonRpcSigner } from "./JsonRpcSigner";
import { OnboardInfo } from "../types";
export declare class BrowserProvider extends JsonRpcApiPollingProvider {
    #private;
    /**
     *  Connnect to the %%ethereum%% provider, optionally forcing the
     *  %%network%%.
     */
    constructor(ethereum: Eip1193Provider, network?: Networkish, _options?: BrowserProviderOptions);
    send(method: string, params: Array<any> | Record<string, any>): Promise<any>;
    _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>>;
    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error;
    /**
     *  Resolves to ``true`` if the provider manages the %%address%%.
     */
    hasSigner(address: number | string): Promise<boolean>;
    getSigner(address?: number | string, userOnboardInfo?: OnboardInfo): Promise<JsonRpcSigner>;
}
